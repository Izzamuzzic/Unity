apply plugin: 'com.android.application'

apply plugin: 'org.greenrobot.greendao'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "com.zwq65.unity"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        flavorDimensions "default"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
        debug {
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 发布生产版本时，BuildVariant直接选择release，签名过的生产包就会生成在build/outputs/apk文件夹
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 自定义输出配置apk名称
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    // 输出apk名称为Unity_v1.0_productFlavors.apk
                    outputFileName = "Unity_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                }
            }
        }
        debug {
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
        }
    }

    productFlavors {
        xiaomi { dimension "default" }
        qihoo360 { dimension "default" }
        wandoujia { dimension "default" }
        baidu { dimension "default" }
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

greendao {
    schemaVersion 2
}

repositories {
    mavenCentral()
    google()
}

kapt {
    generateStubs = true
}

androidExtensions {
    experimental = true
}

dependencies {

    def appDependence = rootProject.ext.deps

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.anko:anko:$anko_version"

    //androidTest
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation appDependence.junit
    testImplementation appDependence.mockito
    debugImplementation appDependence.leakcanary_debug
    releaseImplementation appDependence.leakcanary_release
    implementation appDependence.stetho
    implementation appDependence.bugly

    //support
    implementation appDependence.supportv4
    implementation appDependence.supportv13
    implementation appDependence.appcompatv7
    implementation appDependence.palettev7
    implementation appDependence.recyclerview
    implementation appDependence.cardview
    implementation appDependence.design
    implementation appDependence.annotations
    implementation appDependence.constraint_layout

    //retrofit
    implementation appDependence.okhttp
    implementation appDependence.okhttp3LoggerInterceptor
    implementation appDependence.retrofit
    implementation appDependence.retrofitConverterGson
    implementation appDependence.retrofitAdapterRxjava2

    //reactivexJava
    implementation appDependence.rxJava
    implementation appDependence.rxAndroid
    implementation appDependence.rxKotlin
    implementation appDependence.rxbinding
    //rxLifeCycle2
    implementation appDependence.rxlifecycle
    implementation appDependence.rxlifecycle_android
    implementation appDependence.rxlifecycle_components

    //dagger (dependency injection)
    implementation appDependence.dagger
    implementation appDependence.dagger_android
    implementation appDependence.dagger_android_support
    kapt appDependence.dagger_compiler
    kapt appDependence.dagger_android_processor

    //database
    implementation appDependence.greenDao
    implementation appDependence.greenDaoGenerator

    //glide
    implementation appDependence.glide
    kapt appDependence.glide_compiler

    //common
    implementation appDependence.gson
    implementation appDependence.multidex
    implementation appDependence.easypermissions
    implementation appDependence.barlibrary
    implementation appDependence.photoView
    implementation appDependence.utilcode
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}