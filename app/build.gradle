apply plugin: 'com.android.application'

apply plugin: 'org.greenrobot.greendao'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion Versions.compileSdkVersion
    buildToolsVersion Versions.buildToolsVersion
    defaultConfig {
        applicationId "com.zwq65.unity"
        minSdkVersion Versions.minSdkVersion
        targetSdkVersion Versions.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        flavorDimensions "default"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
        debug {
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            // 混淆
            minifyEnabled true
            // Zipalign优化
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            // 发布生产版本时，BuildVariant直接选择release，签名过的生产包就会生成在build/outputs/apk文件夹
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // 自定义输出配置apk名称
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    // 输出apk名称为Unity_v1.0_productFlavors.apk
                    outputFileName = "Unity_v${defaultConfig.versionName}_${releaseTime()}_${variant.productFlavors[0].name}.apk"
                }
            }
        }
        debug {
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources false
        }
    }

    productFlavors {
        xiaomi { dimension "default" }
        qihoo360 { dimension "default" }
        wandoujia { dimension "default" }
        baidu { dimension "default" }
        productFlavors.all {
            flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

greendao {
    schemaVersion 2
}

repositories {
    mavenCentral()
    google()
}

kapt {
    generateStubs = true
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //androidTest
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    //test
    testImplementation "junit:junit:$Versions.junitVersion"
    testImplementation "org.mockito:mockito-core:$Versions.mockitoVersion"
    //kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //anko
    implementation "org.jetbrains.anko:anko:$anko_version"
    //design
    implementation "com.android.support:appcompat-v7:$Versions.supportLibraryVersion"
    implementation "com.android.support:support-v4:$Versions.supportLibraryVersion"
    implementation "com.android.support:design:$Versions.supportLibraryVersion"
    implementation "com.android.support:support-v13:$Versions.supportLibraryVersion"
    implementation "com.android.support:palette-v7:$Versions.supportLibraryVersion"
    implementation "com.android.support:recyclerview-v7:$Versions.supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$Versions.supportLibraryVersion"
    implementation "com.android.support.constraint:constraint-layout:$Versions.constraintLayoutVersion"
    //network
    implementation "com.squareup.okhttp3:okhttp:$Versions.okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$Versions.okhttpLoggingVersion"
    implementation "com.squareup.retrofit2:retrofit:$Versions.retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$Versions.retrofitConverterVersion"
    implementation "com.jakewharton.retrofit:retrofit2-rxjava2-adapter:$Versions.retrofitRxjava2AdapterVersion"
    //gson
    implementation "com.google.code.gson:gson:$Versions.gsonVersion"
    //glide
    implementation "com.github.bumptech.glide:glide:$Versions.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$Versions.glideVersion"
    //greenDao database
    implementation "org.greenrobot:greendao:$Versions.greenDaoVersion"
    implementation "org.greenrobot:greendao-generator:$Versions.greenDaoGeneratorVersion"
    //butterKnife
    implementation "com.jakewharton:butterknife:$Versions.butterknifeVersion"
    kapt "com.jakewharton:butterknife-compiler:$Versions.butterknifeVersion"
    //rxJava2
    implementation "io.reactivex.rxjava2:rxandroid:$Versions.rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$Versions.rxjavaVersion"
    implementation "com.jakewharton.rxbinding2:rxbinding:$Versions.rxbindingVersion"
    //rxLifeCycle2
    implementation "com.trello.rxlifecycle2:rxlifecycle:$Versions.rxlifecycleVersion"
    implementation "com.trello.rxlifecycle2:rxlifecycle-android:$Versions.rxlifecycleVersion"
    implementation "com.trello.rxlifecycle2:rxlifecycle-components:$Versions.rxlifecycleVersion"
    //dagger2 (dependency injection)
    implementation "com.google.dagger:dagger:$Versions.daggerVersion"
    implementation "com.google.dagger:dagger-android:$Versions.daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$Versions.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$Versions.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$Versions.daggerVersion"
    //multidex
    implementation "com.android.support:multidex:$Versions.multidexVersion"
    //LeakCanary: A memory leak detection library for Android and Java.
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$Versions.leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$Versions.leakCanaryVersion"
    //facebook开源的一款用于查看app数据库等信息的工具,浏览器访问地址：chrome://inspect/#devices
    implementation "com.facebook.stetho:stetho:$Versions.stethoVersion"
    //bugly
    implementation "com.tencent.bugly:crashreport:$Versions.buglyVersion"
    //Simplify Android M system permissions
    implementation "pub.devrel:easypermissions:$Versions.easypermissionsVersion"
    //android 4.4以上沉浸式状态栏和沉浸式导航栏管理
    implementation "com.gyf.barlibrary:barlibrary:$Versions.barlibraryVersion"
    //A circular ImageView for Android
    implementation "de.hdodenhof:circleimageview:$Versions.circleimageviewVersion"
    //Implementation of ImageView for Android that supports zooming, by various touch gestures.
    implementation "com.github.chrisbanes:PhotoView:$Versions.photoViewVersion"
    //🔥 a powerful & easy to use library for Android (https://github.com/Blankj/AndroidUtilCode)
    implementation "com.blankj:utilcode:$Versions.utilcodeVersion"

}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}