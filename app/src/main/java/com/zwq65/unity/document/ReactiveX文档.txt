

ReactiveX文档中文翻译：https://www.gitbook.com/book/mcxiaoke/rxdocs/details
ReactiveX文档中文翻译：https://www.gitbook.com/book/mcxiaoke/rxdocs/details
ReactiveX文档中文翻译：https://www.gitbook.com/book/mcxiaoke/rxdocs/details

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
--创建操作： https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Creating-Observables.html

just( ) — 将一个或多个对象转换成发射这个或这些对象的一个Observable
from( ) — 将一个Iterable, 一个Future, 或者一个数组转换成一个Observable
repeat( ) — 创建一个重复发射指定数据或数据序列的Observable
repeatWhen( ) — 创建一个重复发射指定数据或数据序列的Observable，它依赖于另一个Observable发射的数据
create( ) — 使用一个函数从头创建一个Observable
defer( ) — 只有当订阅者订阅才创建Observable；为每个订阅创建一个新的Observable
range( ) — 创建一个发射指定范围的整数序列的Observable
interval( ) — 创建一个按照给定的时间间隔发射整数序列的Observable
timer( ) — 创建一个在给定的延时之后发射单个数据的Observable
empty( ) — 创建一个什么都不做直接通知完成的Observable
error( ) — 创建一个什么都不做直接通知错误的Observable
never( ) — 创建一个不发射任何数据的Observable
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--变换操作： https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Transforming-Observables.html

map( ) — 对序列的每一项都应用一个函数来变换Observable发射的数据序列
flatMap( ), concatMap( ), and flatMapIterable( ) — 将Observable发射的数据集合变换为Observables集合，然后将这些Observable发射的数据平坦化的放进一个单独的Observable
switchMap( ) — 将Observable发射的数据集合变换为Observables集合，然后只发射这些Observables最近发射的数据
scan( ) — 对Observable发射的每一项数据应用一个函数，然后按顺序依次发射每一个值
groupBy( ) — 将Observable分拆为Observable集合，将原始Observable发射的数据按Key分组，每一个Observable发射一组不同的数据
buffer( ) — 它定期从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个
window( ) — 定期将来自Observable的数据分拆成一些Observable窗口，然后发射这些窗口，而不是每次发射一项
cast( ) — 在发射之前强制将Observable发射的所有数据转换为指定类型
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--过滤操作： https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Filtering-Observables.html

filter( ) — 过滤数据
takeLast( ) — 只发射最后的N项数据
last( ) — 只发射最后的一项数据
lastOrDefault( ) — 只发射最后的一项数据，如果Observable为空就发射默认值
takeLastBuffer( ) — 将最后的N项数据当做单个数据发射
skip( ) — 跳过开始的N项数据
skipLast( ) — 跳过最后的N项数据
take( ) — 只发射开始的N项数据
first( ) and takeFirst( ) — 只发射第一项数据，或者满足某种条件的第一项数据
firstOrDefault( ) — 只发射第一项数据，如果Observable为空就发射默认值
elementAt( ) — 发射第N项数据
elementAtOrDefault( ) — 发射第N项数据，如果Observable数据少于N项就发射默认值
sample( ) or throttleLast( ) — 定期发射Observable最近的数据
throttleFirst( ) — 定期发射Observable发射的第一项数据
throttleWithTimeout( ) or debounce( ) — 只有当Observable在指定的时间后还没有发射数据时，才发射一个数据
timeout( ) — 如果在一个指定的时间段后还没发射数据，就发射一个异常
distinct( ) — 过滤掉重复数据
distinctUntilChanged( ) — 过滤掉连续重复的数据
ofType( ) — 只发射指定类型的数据
ignoreElements( ) — 丢弃所有的正常数据，只发射错误或完成通知
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--结合操作：https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Combining-Observables.html

startWith( ) — 在数据序列的开头增加一项数据
merge( ) — 将多个Observable合并为一个
mergeDelayError( ) — 合并多个Observables，让没有错误的Observable都完成后再发射错误通知
zip( ) — 使用一个函数组合多个Observable发射的数据集合，然后再发射这个结果
and( ), then( ), and when( ) — (rxjava-joins) 通过模式和计划组合多个Observables发射的数据集合
combineLatest( ) — 当两个Observables中的任何一个发射了一个数据时，通过一个指定的函数组合每个Observable发射的最新数据（一共两个数据），然后发射这个函数的结果
join( ) and groupJoin( ) — 无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的时间窗口内，就将两个Observable发射的数据合并发射
switchOnNext( ) — 将一个发射Observables的Observable转换成另一个Observable，后者发射这些Observables最近发射的数据
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--错误处理： https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Error-Handling-Operators.html

很多操作符可用于对Observable发射的onError通知做出响应或者从错误中恢复，例如，你可以：

吞掉这个错误，切换到一个备用的Observable继续发射数据
吞掉这个错误然后发射默认值
吞掉这个错误并立即尝试重启这个Observable
吞掉这个错误，在一些回退间隔后重启这个Observable
这是操作符列表：

onErrorResumeNext( ) — 指示Observable在遇到错误时发射一个数据序列
onErrorReturn( ) — 指示Observable在遇到错误时发射一个特定的数据
onExceptionResumeNext( ) — instructs an Observable to continue emitting items after it encounters an exception (but not another variety of throwable)指示Observable遇到错误时继续发射数据
retry( ) — 指示Observable遇到错误时重试
retryWhen( ) — 指示Observable遇到错误时，将错误传递给另一个Observable来决定是否要重新给订阅这个Observable
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

--辅助操作: https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Observable-Utility-Operators.html

materialize( ) — 将Observable转换成一个通知列表convert an Observable into a list of Notifications
dematerialize( ) — 将上面的结果逆转回一个Observable
timestamp( ) — 给Observable发射的每个数据项添加一个时间戳
serialize( ) — 强制Observable按次序发射数据并且要求功能是完好的
cache( ) — 记住Observable发射的数据序列并发射相同的数据序列给后续的订阅者
observeOn( ) — 指定观察者观察Observable的调度器
subscribeOn( ) — 指定Observable执行任务的调度器
doOnEach( ) — 注册一个动作，对Observable发射的每个数据项使用
doOnCompleted( ) — 注册一个动作，对正常完成的Observable使用
doOnError( ) — 注册一个动作，对发生错误的Observable使用
doOnTerminate( ) — 注册一个动作，对完成的Observable使用，无论是否发生错误
doOnSubscribe( ) — 注册一个动作，在观察者订阅时使用
doOnUnsubscribe( ) — 注册一个动作，在观察者取消订阅时使用
finallyDo( ) — 注册一个动作，在Observable完成时使用
delay( ) — 延时发射Observable的结果
delaySubscription( ) — 延时处理订阅请求
timeInterval( ) — 定期发射数据
using( ) — 创建一个只在Observable生命周期存在的资源
single( ) — 强制返回单个数据，否则抛出异常
singleOrDefault( ) — 如果Observable完成时返回了单个数据，就返回它，否则返回默认数据
toFuture( ), toIterable( ), toList( ) — 将Observable转换为其它对象或数据结构
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

条件和布尔操作符: https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Conditional-and-Boolean-Operators.html

条件操作符

amb( ) — 给定多个Observable，只让第一个发射数据的Observable发射全部数据
defaultIfEmpty( ) — 发射来自原始Observable的数据，如果原始Observable没有发射数据，就发射一个默认数据
(rxjava-computation-expressions) doWhile( ) — 发射原始Observable的数据序列，然后重复发射这个序列直到不满足这个条件为止
(rxjava-computation-expressions) ifThen( ) — 只有当某个条件为真时才发射原始Observable的数据序列，否则发射一个空的或默认的序列
skipUntil( ) — 丢弃原始Observable发射的数据，直到第二个Observable发射了一个数据，然后发射原始Observable的剩余数据
skipWhile( ) — 丢弃原始Observable发射的数据，直到一个特定的条件为假，然后发射原始Observable剩余的数据
(rxjava-computation-expressions) switchCase( ) — 基于一个计算结果，发射一个指定Observable的数据序列
takeUntil( ) — 发射来自原始Observable的数据，直到第二个Observable发射了一个数据或一个通知
takeWhile( ) and takeWhileWithIndex( ) — 发射原始Observable的数据，直到一个特定的条件为真，然后跳过剩余的数据
(rxjava-computation-expressions) whileDo( ) — 如果条件为true，则发射源Observable数据序列，并且只要条件保持为true就重复发射此数据序列
(rxjava-computation-expressions) — 表示这个操作符当前是可选包 rxjava-computation-expressions 的一部分，还没有包含在标准RxJava的操作符集合里

布尔操作符

all( ) — 判断是否所有的数据项都满足某个条件
contains( ) — 判断Observable是否会发射一个指定的值
exists( ) and isEmpty( ) — 判断Observable是否发射了一个值
sequenceEqual( ) — 判断两个Observables发射的序列是否相等
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

算数和聚合操作: https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Mathematical-and-Aggregate-Operators.html

本页展示的操作符用于对整个序列执行算法操作或其它操作，由于这些操作必须等待数据发射完成（通常也必须缓存这些数据），它们对于非常长或者无限的序列来说是危险的，不推荐使用。

rxjava-math 模块的操作符

averageInteger( ) — 求序列平均数并发射
averageLong( ) — 求序列平均数并发射
averageFloat( ) — 求序列平均数并发射
averageDouble( ) — 求序列平均数并发射
max( ) — 求序列最大值并发射
maxBy( ) — 求最大key对应的值并发射
min( ) — 求最小值并发射
minBy( ) — 求最小Key对应的值并发射
sumInteger( ) — 求和并发射
sumLong( ) — 求和并发射
sumFloat( ) — 求和并发射
sumDouble( ) — 求和并发射
其它聚合操作符

concat( ) — 顺序连接多个Observables
count( ) and countLong( ) — 计算数据项的个数并发射结果
reduce( ) — 对序列使用reduce()函数并发射最终的结果
collect( ) — 将原始Observable发射的数据放到一个单一的可变的数据结构中，然后返回一个发射这个数据结构的Observable
toList( ) — 收集原始Observable发射的所有数据到一个列表，然后返回这个列表
toSortedList( ) — 收集原始Observable发射的所有数据到一个有序列表，然后返回这个列表
toMap( ) — 将序列数据转换为一个Map，Map的key是根据一个函数计算的
toMultiMap( ) — 将序列数据转换为一个列表，同时也是一个Map，Map的key是根据一个函数计算的
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

异步操作: https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Async-Operators.html

下面的这些操作符属于单独的rxjava-async模块，它们用于将同步对象转换为Observable。

start( ) — 创建一个Observable，它发射一个函数的返回值
toAsync( ) or asyncAction( ) or asyncFunc( ) — 将一个函数或者Action转换为已Observable，它执行这个函数并发射函数的返回值
startFuture( ) — 将一个返回Future的函数转换为一个Observable，它发射Future的返回值
deferFuture( ) — 将一个返回Observable的Future转换为一个Observable，但是并不尝试获取这个Future返回的Observable，直到有订阅者订阅它
forEachFuture( ) — 传递Subscriber方法给一个Subscriber，但是同时表现得像一个Future一样阻塞直到它完成
fromAction( ) — 将一个Action转换为Observable，当一个订阅者订阅时，它执行这个action并发射它的返回值
fromCallable( ) — 将一个Callable转换为Observable，当一个订阅者订阅时，它执行这个Callable并发射Callable的返回值，或者发射异常
fromRunnable( ) — convert a Runnable into an Observable that invokes the runable and emits its result when a Subscriber subscribes将一个Runnable转换为Observable，当一个订阅者订阅时，它执行这个Runnable并发射Runnable的返回值
runAsync( ) — 返回一个StoppableObservable，它发射某个Scheduler上指定的Action生成的多个actions
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

连接操作:https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Connectable-Observable-Operators.html

这一节解释ConnectableObservable 和它的子类以及它们的操作符：

ConnectableObservable.connect( ) — 指示一个可连接的Observable开始发射数据
Observable.publish( ) — 将一个Observable转换为一个可连接的Observable
Observable.replay( ) — 确保所有的订阅者看到相同的数据序列，即使它们在Observable开始发射数据之后才订阅
ConnectableObservable.refCount( ) — 让一个可连接的Observable表现得像一个普通的Observable
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

阻塞操作: https://mcxiaoke.gitbooks.io/rxdocs/content/operators/Blocking-Observable-Operators.html

这一节解释 BlockingObservable 的子类. 一个阻塞的Observable 继承普通的Observable类，增加了一些可用于阻塞Observable发射的数据的操作符。
要将普通的Observable 转换为 BlockingObservable，可以使用 Observable.toBlocking( )) 方法或者BlockingObservable.from( )) 方法。

forEach( ) — 对Observable发射的每一项数据调用一个方法，会阻塞直到Observable完成
first( ) — 阻塞直到Observable发射了一个数据，然后返回第一项数据
firstOrDefault( ) — 阻塞直到Observable发射了一个数据或者终止，返回第一项数据，或者返回默认值
last( ) — 阻塞直到Observable终止，然后返回最后一项数据
lastOrDefault( ) — 阻塞直到Observable终止，然后返回最后一项的数据，或者返回默认值
mostRecent( ) — 返回一个总是返回Observable最近发射的数据的iterable
next( ) — 返回一个Iterable，会阻塞直到Observable发射了另一个值，然后返回那个值
latest( ) — 返回一个iterable，会阻塞直到或者除非Observable发射了一个iterable没有返回的值，然后返回这个值
single( ) — 如果Observable终止时只发射了一个值，返回那个值，否则抛出异常
singleOrDefault( ) — 如果Observable终止时只发射了一个值，返回那个值，否则否好默认值
toFuture( ) — 将Observable转换为一个Future
toIterable( ) — 将一个发射数据序列的Observable转换为一个Iterable
getIterator( ) — 将一个发射数据序列的Observable转换为一个Iterator
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

字符串操作: https://mcxiaoke.gitbooks.io/rxdocs/content/operators/String-Observables.html

StringObservable 类包含一些用于处理字符串序列和流的特殊操作符，如下：

byLine( ) — 将一个字符串的Observable转换为一个行序列的Observable，这个Observable将原来的序列当做流处理，然后按换行符分割
decode( ) — 将一个多字节的字符流转换为一个Observable，它按字符边界发射字节数组
encode( ) — 对一个发射字符串的Observable执行变换操作，变换后的Observable发射一个在原始字符串中表示多字节字符边界的字节数组
from( ) — 将一个字符流或者Reader转换为一个发射字节数组或者字符串的Observable
join( ) — 将一个发射字符串序列的Observable转换为一个发射单个字符串的Observable，后者用一个指定的字符串连接所有的字符串
split( ) — 将一个发射字符串的Observable转换为另一个发射字符串的Observable，后者使用一个指定的正则表达式边界分割前者发射的所有字符串
stringConcat( ) — 将一个发射字符串序列的Observable转换为一个发射单个字符串的Observable，后者连接前者发射的所有字符串
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

按字母顺序排列的全部操作符列表

aggregate( ) — see reduce( )
all( ) — determine whether all items emitted by an Observable meet some criteria
amb( ) — given two or more source Observables, emits all of the items from the first of these Observables to emit an item
ambWith( ) — instance version of amb( )
and( ) — combine the emissions from two or more source Observables into a Pattern (rxjava-joins)
apply( ) (scala) — see create( )
asObservable( ) (kotlin) — see from( ) (et al.)
asyncAction( ) — convert an Action into an Observable that executes the Action and emits its return value (rxjava-async)
asyncFunc( ) — convert a function into an Observable that executes the function and emits its return value (rxjava-async)
averageDouble( ) — calculates the average of Doubles emitted by an Observable and emits this average (rxjava-math)
averageFloat( ) — calculates the average of Floats emitted by an Observable and emits this average (rxjava-math)
averageInteger( ) — calculates the average of Integers emitted by an Observable and emits this average (rxjava-math)
averageLong( ) — calculates the average of Longs emitted by an Observable and emits this average (rxjava-math)
blocking( ) (clojure) — see toBlocking( )
buffer( ) — periodically gather items from an Observable into bundles and emit these bundles rather than emitting the items one at a time
byLine( ) (StringObservable) — converts an Observable of Strings into an Observable of Lines by treating the source sequence as a stream and splitting it on line-endings
cache( ) — remember the sequence of items emitted by the Observable and emit the same sequence to future Subscribers
cast( ) — cast all items from the source Observable into a particular type before reemitting them
catch( ) (clojure) — see onErrorResumeNext( )
chunkify( ) — returns an iterable that periodically returns a list of items emitted by the source Observable since the last list (⁇)
collect( ) — collects items emitted by the source Observable into a single mutable data structure and returns an Observable that emits this structure
combineLatest( ) — when an item is emitted by either of two Observables, combine the latest item emitted by each Observable via a specified function and emit items based on the results of this function
combineLatestWith( ) (scala) — instance version of combineLatest( )
concat( ) — concatenate two or more Observables sequentially
concatMap( ) — transform the items emitted by an Observable into Observables, then flatten this into a single Observable, without interleaving
concatWith( ) — instance version of concat( )
connect( ) — instructs a Connectable Observable to begin emitting items
cons( ) (clojure) — see concat( )
contains( ) — determine whether an Observable emits a particular item or not
count( ) — counts the number of items emitted by an Observable and emits this count
countLong( ) — counts the number of items emitted by an Observable and emits this count
create( ) — create an Observable from scratch by means of a function
cycle( ) (clojure) — see repeat( )
debounce( ) — only emit an item from the source Observable after a particular timespan has passed without the Observable emitting any other items
decode( ) (StringObservable) — convert a stream of multibyte characters into an Observable that emits byte arrays that respect character boundaries
defaultIfEmpty( ) — emit items from the source Observable, or emit a default item if the source Observable completes after emitting no items
defer( ) — do not create the Observable until a Subscriber subscribes; create a fresh Observable on each subscription
deferFuture( ) — convert a Future that returns an Observable into an Observable, but do not attempt to get the Observable that the Future returns until a Subscriber subscribes (rxjava-async)
deferCancellableFuture( ) — convert a Future that returns an Observable into an Observable in a way that monitors the subscription status of the Observable to determine whether to halt work on the Future, but do not attempt to get the returned Observable until a Subscriber subscribes (⁇)(rxjava-async)
delay( ) — shift the emissions from an Observable forward in time by a specified amount
dematerialize( ) — convert a materialized Observable back into its non-materialized form
distinct( ) — suppress duplicate items emitted by the source Observable
distinctUntilChanged( ) — suppress duplicate consecutive items emitted by the source Observable
do( ) (clojure) — see doOnEach( )
doOnCompleted( ) — register an action to take when an Observable completes successfully
doOnEach( ) — register an action to take whenever an Observable emits an item
doOnError( ) — register an action to take when an Observable completes with an error
doOnNext( ) — see doOnEach( )
doOnRequest( ) — register an action to take when items are requested from an Observable via reactive-pull backpressure (⁇)
doOnSubscribe( ) — register an action to take when an observer subscribes to an Observable
doOnTerminate( ) — register an action to take when an Observable completes, either successfully or with an error
doOnUnsubscribe( ) — register an action to take when an observer unsubscribes from an Observable
doWhile( ) — emit the source Observable's sequence, and then repeat the sequence as long as a condition remains true (contrib-computation-expressions)
drop( ) (scala/clojure) — see skip( )
dropRight( ) (scala) — see skipLast( )
dropUntil( ) (scala) — see skipUntil( )
dropWhile( ) (scala) — see skipWhile( )
drop-while( ) (clojure) — see skipWhile( )
elementAt( ) — emit item n emitted by the source Observable
elementAtOrDefault( ) — emit item n emitted by the source Observable, or a default item if the source Observable emits fewer than n items
empty( ) — create an Observable that emits nothing and then completes
encode( ) (StringObservable) — transform an Observable that emits strings into an Observable that emits byte arrays that respect character boundaries of multibyte characters in the original strings
error( ) — create an Observable that emits nothing and then signals an error
every( ) (clojure) — see all( )
exists( ) — determine whether an Observable emits any items or not
filter( ) — filter items emitted by an Observable
finally( ) (clojure) — see finallyDo( )
filterNot( ) (scala) — see filter( )
finallyDo( ) — register an action to take when an Observable completes
first( ) (Observable) — emit only the first item emitted by an Observable, or the first item that meets some condition
first( ) (BlockingObservable) — emit only the first item emitted by an Observable, or the first item that meets some condition
firstOrDefault( ) (Observable) — emit only the first item emitted by an Observable, or the first item that meets some condition, or a default value if the source Observable is empty
firstOrDefault( ) (BlockingObservable) — emit only the first item emitted by an Observable, or the first item that meets some condition, or a default value if the source Observable is empty
firstOrElse( ) (scala) — see firstOrDefault( ) or firstOrDefault( ) (BlockingObservable)
flatMap( ) — transform the items emitted by an Observable into Observables, then flatten this into a single Observable
flatMapIterable( ) — create Iterables corresponding to each emission from a source Observable and merge the results into a single Observable
flatMapIterableWith( ) (scala) — instance version of flatMapIterable( )
flatMapWith( ) (scala) — instance version of flatmap( )
flatten( ) (scala) — see merge( )
flattenDelayError( ) (scala) — see mergeDelayError( )
foldLeft( ) (scala) — see reduce( )
forall( ) (scala) — see all( )
forEach( ) (Observable) — see subscribe( )
forEach( ) (BlockingObservable) — invoke a function on each item emitted by the Observable; block until the Observable completes
forEachFuture( ) (Async) — pass Subscriber methods to an Observable but also have it behave like a Future that blocks until it completes (rxjava-async)
forEachFuture( ) (BlockingObservable)— create a futureTask that will invoke a specified function on each item emitted by an Observable (⁇)
forIterable( ) — apply a function to the elements of an Iterable to create Observables which are then concatenated (⁇)
from( ) — convert an Iterable, a Future, or an Array into an Observable
from( ) (StringObservable) — convert a stream of characters or a Reader into an Observable that emits byte arrays or Strings
fromAction( ) — convert an Action into an Observable that invokes the action and emits its result when a Subscriber subscribes (rxjava-async)
fromCallable( ) — convert a Callable into an Observable that invokes the callable and emits its result or exception when a Subscriber subscribes (rxjava-async)
fromCancellableFuture( ) — convert a Future into an Observable in a way that monitors the subscription status of the Observable to determine whether to halt work on the Future, but do not attempt to get the Future's value until a Subscriber subscribes (⁇)(rxjava-async)
fromFunc0( ) — see fromCallable( ) (rxjava-async)
fromFuture( ) — convert a Future into an Observable, but do not attempt to get the Future's value until a Subscriber subscribes (⁇)
fromRunnable( ) — convert a Runnable into an Observable that invokes the runable and emits its result when a Subscriber subscribes (rxjava-async)
generate( ) — create an Observable that emits a sequence of items as generated by a function of your choosing (⁇)
generateAbsoluteTime( ) — create an Observable that emits a sequence of items as generated by a function of your choosing, with each item emitted at an item-specific time (⁇)
generator( ) (clojure) — see generate( )
getIterator( ) — convert the sequence emitted by the Observable into an Iterator
groupBy( ) — divide an Observable into a set of Observables that emit groups of items from the original Observable, organized by key
group-by( ) (clojure) — see groupBy( )
groupByUntil( ) — a variant of the groupBy( ) operator that closes any open GroupedObservable upon a signal from another Observable (⁇)
groupJoin( ) — combine the items emitted by two Observables whenever one item from one Observable falls within a window of duration specified by an item emitted by the other Observable
head( ) (scala) — see first( ) (BlockingObservable)
headOption( ) (scala) — see firstOrDefault( ) or firstOrDefault( ) (BlockingObservable)
headOrElse( ) (scala) — see firstOrDefault( ) or firstOrDefault( ) (BlockingObservable)
ifThen( ) — only emit the source Observable's sequence if a condition is true, otherwise emit an empty or default sequence (contrib-computation-expressions)
ignoreElements( ) — discard the items emitted by the source Observable and only pass through the error or completed notification
interval( ) — create an Observable that emits a sequence of integers spaced by a given time interval
into( ) (clojure) — see reduce( )
isEmpty( ) — determine whether an Observable emits any items or not
items( ) (scala) — see just( )
join( ) — combine the items emitted by two Observables whenever one item from one Observable falls within a window of duration specified by an item emitted by the other Observable
join( ) (StringObservable) — converts an Observable that emits a sequence of strings into an Observable that emits a single string that concatenates them all, separating them by a specified string
just( ) — convert an object into an Observable that emits that object
last( ) (BlockingObservable) — block until the Observable completes, then return the last item emitted by the Observable
last( ) (Observable) — emit only the last item emitted by the source Observable
lastOption( ) (scala) — see lastOrDefault( ) or lastOrDefault( ) (BlockingObservable)
lastOrDefault( ) (BlockingObservable) — block until the Observable completes, then return the last item emitted by the Observable or a default item if there is no last item
lastOrDefault( ) (Observable) — emit only the last item emitted by an Observable, or a default value if the source Observable is empty
lastOrElse( ) (scala) — see lastOrDefault( ) or lastOrDefault( ) (BlockingObservable)
latest( ) — returns an iterable that blocks until or unless the Observable emits an item that has not been returned by the iterable, then returns the latest such item
length( ) (scala) — see count( )
limit( ) — see take( )
longCount( ) (scala) — see countLong( )
map( ) — transform the items emitted by an Observable by applying a function to each of them
mapcat( ) (clojure) — see concatMap( )
mapMany( ) — see: flatMap( )
materialize( ) — convert an Observable into a list of Notifications
max( ) — emits the maximum value emitted by a source Observable (rxjava-math)
maxBy( ) — emits the item emitted by the source Observable that has the maximum key value (rxjava-math)
merge( ) — combine multiple Observables into one
mergeDelayError( ) — combine multiple Observables into one, allowing error-free Observables to continue before propagating errors
merge-delay-error( ) (clojure) — see mergeDelayError( )
mergeMap( ) — _see: [*flatMap( )](operators/Transforming-Observables#flatmap-concatmap-and-flatmapiterable)_
mergeMapIterable( ) — see: flatMapIterable( )
mergeWith( ) — instance version of merge( )
min( ) — emits the minimum value emitted by a source Observable (rxjava-math)
minBy( ) — emits the item emitted by the source Observable that has the minimum key value (rxjava-math)
mostRecent( ) — returns an iterable that always returns the item most recently emitted by the Observable
multicast( ) — represents an Observable as a Connectable Observable
never( ) — create an Observable that emits nothing at all
next( ) — returns an iterable that blocks until the Observable emits another item, then returns that item
nonEmpty( ) (scala) — see isEmpty( )
nth( ) (clojure) — see elementAt( ) and elementAtOrDefault( )
observeOn( ) — specify on which Scheduler a Subscriber should observe the Observable
ofType( ) — emit only those items from the source Observable that are of a particular class
onBackpressureBlock( ) — block the Observable's thread until the Observer is ready to accept more items from the Observable (⁇)
onBackpressureBuffer( ) — maintain a buffer of all emissions from the source Observable and emit them to downstream Subscribers according to the requests they generate
onBackpressureDrop( ) — drop emissions from the source Observable unless there is a pending request from a downstream Subscriber, in which case emit enough items to fulfill the request
onErrorFlatMap( ) — instructs an Observable to emit a sequence of items whenever it encounters an error (⁇)
onErrorResumeNext( ) — instructs an Observable to emit a sequence of items if it encounters an error
onErrorReturn( ) — instructs an Observable to emit a particular item when it encounters an error
onExceptionResumeNext( ) — instructs an Observable to continue emitting items after it encounters an exception (but not another variety of throwable)
orElse( ) (scala) — see defaultIfEmpty( )
parallel( ) — split the work done on the emissions from an Observable into multiple Observables each operating on its own parallel thread (⁇)
parallelMerge( ) — combine multiple Observables into smaller number of Observables (⁇)
pivot( ) — combine multiple sets of grouped observables so that they are arranged primarily by group rather than by set (⁇)
publish( ) — represents an Observable as a Connectable Observable
publishLast( ) — represent an Observable as a Connectable Observable that emits only the last item emitted by the source Observable (⁇)
range( ) — create an Observable that emits a range of sequential integers
reduce( ) — apply a function to each emitted item, sequentially, and emit only the final accumulated value
reductions( ) (clojure) — see scan( )
refCount( ) — makes a Connectable Observable behave like an ordinary Observable
repeat( ) — create an Observable that emits a particular item or sequence of items repeatedly
repeatWhen( ) — create an Observable that emits a particular item or sequence of items repeatedly, depending on the emissions of a second Observable
replay( ) — ensures that all Subscribers see the same sequence of emitted items, even if they subscribe after the Observable begins emitting the items
rest( ) (clojure) — see next( )
return( ) (clojure) — see just( )
retry( ) — if a source Observable emits an error, resubscribe to it in the hopes that it will complete without error
retrywhen( ) — if a source Observable emits an error, pass that error to another Observable to determine whether to resubscribe to the source
runAsync( ) — returns a StoppableObservable that emits multiple actions as generated by a specified Action on a Scheduler (rxjava-async)
sample( ) — emit the most recent items emitted by an Observable within periodic time intervals
scan( ) — apply a function to each item emitted by an Observable, sequentially, and emit each successive value
seq( ) (clojure) — see getIterator( )
sequenceEqual( ) — test the equality of sequences emitted by two Observables
sequenceEqualWith( ) (scala) — instance version of sequenceEqual( )
serialize( ) — force an Observable to make serialized calls and to be well-behaved
share( ) — see refCount( )
single( ) (BlockingObservable) — if the source Observable completes after emitting a single item, return that item, otherwise throw an exception
single( ) (Observable) — if the source Observable completes after emitting a single item, emit that item, otherwise notify of an exception
singleOption( ) (scala) — see singleOrDefault( ) (BlockingObservable)
singleOrDefault( ) (BlockingObservable) — if the source Observable completes after emitting a single item, return that item, otherwise return a default item
singleOrDefault( ) (Observable) — if the source Observable completes after emitting a single item, emit that item, otherwise emit a default item
singleOrElse( ) (scala) — see singleOrDefault( )
size( ) (scala) — see count( )
skip( ) — ignore the first n items emitted by an Observable
skipLast( ) — ignore the last n items emitted by an Observable
skipUntil( ) — discard items emitted by a source Observable until a second Observable emits an item, then emit the remainder of the source Observable's items
skipWhile( ) — discard items emitted by an Observable until a specified condition is false, then emit the remainder
sliding( ) (scala) — see window( )
slidingBuffer( ) (scala) — see buffer( )
split( ) (StringObservable) — converts an Observable of Strings into an Observable of Strings that treats the source sequence as a stream and splits it on a specified regex boundary
start( ) — create an Observable that emits the return value of a function (rxjava-async)
startCancellableFuture( ) — convert a function that returns Future into an Observable that emits that Future's return value in a way that monitors the subscription status of the Observable to determine whether to halt work on the Future (⁇)(rxjava-async)
startFuture( ) — convert a function that returns Future into an Observable that emits that Future's return value (rxjava-async)
startWith( ) — emit a specified sequence of items before beginning to emit the items from the Observable
stringConcat( ) (StringObservable) — converts an Observable that emits a sequence of strings into an Observable that emits a single string that concatenates them all
subscribeOn( ) — specify which Scheduler an Observable should use when its subscription is invoked
sumDouble( ) — adds the Doubles emitted by an Observable and emits this sum (rxjava-math)
sumFloat( ) — adds the Floats emitted by an Observable and emits this sum (rxjava-math)
sumInteger( ) — adds the Integers emitted by an Observable and emits this sum (rxjava-math)
sumLong( ) — adds the Longs emitted by an Observable and emits this sum (rxjava-math)
switch( ) (scala) — see switchOnNext( )
switchCase( ) — emit the sequence from a particular Observable based on the results of an evaluation (contrib-computation-expressions)
switchMap( ) — transform the items emitted by an Observable into Observables, and mirror those items emitted by the most-recently transformed Observable
switchOnNext( ) — convert an Observable that emits Observables into a single Observable that emits the items emitted by the most-recently emitted of those Observables
synchronize( ) — see serialize( )
take( ) — emit only the first n items emitted by an Observable
takeFirst( ) — emit only the first item emitted by an Observable, or the first item that meets some condition
takeLast( ) — only emit the last n items emitted by an Observable
takeLastBuffer( ) — emit the last n items emitted by an Observable, as a single list item
takeRight( ) (scala) — see last( ) (Observable) or takeLast( )
takeUntil( ) — emits the items from the source Observable until a second Observable emits an item
takeWhile( ) — emit items emitted by an Observable as long as a specified condition is true, then skip the remainder
take-while( ) (clojure) — see takeWhile( )
then( ) — transform a series of Pattern objects via a Plan template (rxjava-joins)
throttleFirst( ) — emit the first items emitted by an Observable within periodic time intervals
throttleLast( ) — emit the most recent items emitted by an Observable within periodic time intervals
throttleWithTimeout( ) — only emit an item from the source Observable after a particular timespan has passed without the Observable emitting any other items
throw( ) (clojure) — see error( )
timeInterval( ) — emit the time lapsed between consecutive emissions of a source Observable
timeout( ) — emit items from a source Observable, but issue an exception if no item is emitted in a specified timespan
timer( ) — create an Observable that emits a single item after a given delay
timestamp( ) — attach a timestamp to every item emitted by an Observable
toAsync( ) — convert a function or Action into an Observable that executes the function and emits its return value (rxjava-async)
toBlocking( ) — transform an Observable into a BlockingObservable
toBlockingObservable( ) - see toBlocking( )
toFuture( ) — convert the Observable into a Future
toIterable( ) — convert the sequence emitted by the Observable into an Iterable
toIterator( ) — see getIterator( )
toList( ) — collect all items from an Observable and emit them as a single List
toMap( ) — convert the sequence of items emitted by an Observable into a map keyed by a specified key function
toMultimap( ) — convert the sequence of items emitted by an Observable into an ArrayList that is also a map keyed by a specified key function
toSeq( ) (scala) — see toList( )
toSortedList( ) — collect all items from an Observable and emit them as a single, sorted List
tumbling( ) (scala) — see window( )
tumblingBuffer( ) (scala) — see buffer( )
using( ) — create a disposable resource that has the same lifespan as an Observable
when( ) — convert a series of Plan objects into an Observable (rxjava-joins)
where( ) — see: filter( )
whileDo( ) — if a condition is true, emit the source Observable's sequence and then repeat the sequence as long as the condition remains true (contrib-computation-expressions)
window( ) — periodically subdivide items from an Observable into Observable windows and emit these windows rather than emitting the items one at a time
zip( ) — combine sets of items emitted by two or more Observables together via a specified function and emit items based on the results of this function
zipWith( ) — instance version of zip( )
zipWithIndex( ) (scala) — see zip( )
++ (scala) — see concat( )
+: (scala) — see startWith( )
(⁇) — 表示这个操作符不是RxJava 1.0.0核心模块的组成部分










