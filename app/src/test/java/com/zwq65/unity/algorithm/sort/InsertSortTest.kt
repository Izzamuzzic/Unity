package com.zwq65.unity.algorithm.sort

import org.junit.Test

/**
 *================================================
 * 插入排序
 *
 * 插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据.
 * 1.从第一个元素开始，该元素可以认为已经被排序
 * 2.取出下一个元素，在已经排序的元素序列中从后向前扫描
 * 3.如果该元素（已排序）大于新元素，将该元素移到下一位置
 * 4.重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置
 * 5.将新元素插入到该位置后
 * 6.重复步骤 2~5
 *
 * 插入排序总结：
 * 时间平均复杂度为O(n²)。
 * 空间复杂度为 O(1)。
 * 插入排序为稳定排序。
 * 插入排序对于近乎有序的数组来说效率更高，插入排序可用来优化高级排序算法
 *
 * Created by NIRVANA on 2018/3/2
 * Contact with <zwq651406441@gmail.com>
 *================================================
 */
class InsertSortTest {
    companion object {
        val array = arrayOf(11, 23, 3, 545, 342, 6564, 7, 5)
    }

    private var temp: Int = 0

    @Test
    fun sort() {
        //外层循环控制需要排序的趟数(从1开始因为将第0位看成了有序数据)
        var i = 1
        while (i < array.size) {
            temp = array[i]
            //如果前一位(已排序的数据)比当前数据要大，那么就进入循环比较[参考第二趟排序]
            while (i >= 1 && array[i - 1] > temp) {
                //往后退一个位置，让当前数据与之前前位进行比较
                array[i] = array[i - 1]
                //不断往前，直到退出循环
                i--
            }
            //退出了循环说明找到了合适的位置了，将当前数据插入合适的位置中
            array[i] = temp
            i++
        }
        for (item in array) {
            println(item)
        }
    }
}